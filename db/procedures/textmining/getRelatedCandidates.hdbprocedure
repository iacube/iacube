PROCEDURE "IACUBE"."iacube.db.procedures.textmining::getRelatedCandidates" (IN reqId INTEGER , IN topN SMALLINT , 
   OUT relatedCandidates "IACUBE"."iacube.db::types.relatedCandidates" DEFAULT EMPTY)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   READS SQL DATA AS
BEGIN
   DECLARE lt_scoredRelations "IACUBE"."iacube.db::types.scoredRelations";
   DECLARE X INTEGER;
   DECLARE lang NVARCHAR(10);

   X:=topN*2;
   SELECT A."Language" INTO lang FROM "IACUBE"."iacube.db::tables.Document.Documents" A 
   WHERE A."ExtId"=:reqId AND A."ExtType"='R';

   CALL "IACUBE"."iacube.db.procedures.textmining::getScoredRelations" (:reqId,:lang,:X,:lt_scoredRelations);
   
   lt_profFullTotalScore=SELECT A."DocExtId" AS "SumProfile",A."RelScore" AS "SumScore",A."RelDim" AS "DimA",
                                B."DocExtId" AS "SkillProfile",B."RelScore" AS "SkillScore" ,B."RelDim" AS "DimB"
                         FROM :lt_scoredRelations AS A 
                         LEFT OUTER JOIN :lt_scoredRelations AS B
                         ON A."DocExtId"=B."DocExtId" AND A."RelDim" <> B."RelDim";

   lt_profTotScore=SELECT COALESCE(A."SumProfile",A."SkillProfile") AS "ProfileId",
                          SQRT(POWER(IFNULL(A."SumScore",0),2)+POWER(IFNULL(A."SkillScore",0),2)) AS "TotalScore"
                    FROM :lt_profFullTotalScore AS A
                    WHERE IFNULL(A."DimA",'XX') IN ('XX','CC') AND IFNULL(A."DimB",'XX') IN ('XX','SS');                    

   lt_candidateProfileScored=SELECT A."ProfileId" AS "ProfileId", B."CandidateId" AS "CandidateId", A."TotalScore" AS "score"
                             FROM :lt_profTotScore AS A 
                             JOIN "IACUBE"."iacube.db::tables.Candidate.Profiles" AS B
                             ON A."ProfileId"=B."ProfileId"
                             ORDER BY A."TotalScore" DESC;

   relatedCandidates=SELECT TOP :topN "ProfileId", "CandidateId", "score" FROM :lt_candidateProfileScored;
   
END