PROCEDURE "IACUBE"."iacube.db.procedures.candidate::getCandidates"(
	IN 	searchTerm	  NVARCHAR(1000),
	IN 	filter		  NVARCHAR(5000),
	IN  paging		  "IACUBE"."iacube.db::types.paging"						DEFAULT EMPTY,
	IN  reqId		  INTEGER,
	
	OUT candidates	  "IACUBE"."iacube.db::types.searchCandidatesCandidates"	DEFAULT EMPTY,
	OUT profiles	  "IACUBE"."iacube.db::types.searchCandidatesProfiles"		DEFAULT EMPTY,
	OUT salary		  "IACUBE"."iacube.db::types.searchCandidatesSalary"		DEFAULT EMPTY,
	OUT contacts	  "IACUBE"."iacube.db::types.searchCandidatesContacts"		DEFAULT EMPTY,
	OUT languages	  "IACUBE"."iacube.db::types.searchCandidatesLanguages"		DEFAULT EMPTY,
	OUT requisitions  "IACUBE"."iacube.db::types.searchCandidatesRequisitions" 	DEFAULT EMPTY,
	
	OUT sites		  "IACUBE"."iacube.db::types.idName" DEFAULT EMPTY
)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA IACUBE
	READS SQL DATA AS
BEGIN

	DECLARE nLimit  INTEGER;
	DECLARE nOffset INTEGER := 0;
	
--if reqId in filter is applyed	
--probably better to use 
	IF :reqId IS NOT NULL THEN
		CALL "iacube.db.procedures.textmining::getRelatedCandidates"(:reqId,20,relatedCandidates);
	
		reqCandidates = 
			SELECT DISTINCT
					:reqId 									AS "ReqId",
					IFNULL(a."CandidateId",b."CandidateId") AS "CandidateId",
					IFNULL(a."ProfileId",b."ProfileId")		AS "ProfileId",
					IFNULL(TO_INTEGER(a."score" * 100),b."Distance") AS "Distance",
					b."StatusId"
				FROM :relatedCandidates AS a
				FULL OUTER JOIN	(
					SELECT DISTINCT
							"CandidateId",
							"StatusId",
							"ChangedBy",
							"ChangedAt",
							"AssignedBy",
							"AssignedAt",
							"ProfileId",
							"Distance"
						FROM "iacube.db::tables.Requisition.Candidates"
						WHERE "ReqId" = :reqId) AS b
					ON  a."CandidateId" = b."CandidateId"
					AND a."ProfileId"   = b."ProfileId"
		;
	ELSE
		reqCandidates = 
			SELECT DISTINCT
				d."ReqId",
				a."CandidateId",
				b."ProfileId",
				TO_INTEGER(d."Distance" * 100) AS "Distance",
				d."StatusId"
			FROM "iacube.db::tables.Candidate.Candidates" AS a
			INNER JOIN "iacube.db::tables.Candidate.Profiles" AS b
				ON a."CandidateId" = b."CandidateId"
			LEFT JOIN "iacube.db::tables.Requisition.Candidates" AS d
				ON  a."CandidateId" = d."CandidateId"
				AND b."ProfileId" = d."ProfileId"
		;
	END IF;	

	prefiltered = 
		SELECT DISTINCT
				r."CandidateId",
				a."LastName",
				a."FirstName",
				a."Location",
				a."ProfArea",
				r."ProfileId",
				
				c."ExternalId",
				c."ProfileTypeId",
				c."Link",
				a."Photo",
				r."ReqId",
				r."Distance",
				c."Headline",
				r."StatusId"
			FROM :reqCandidates AS r
			LEFT JOIN "iacube.db::tables.Candidate.Candidates" AS a
				ON r."CandidateId" = a."CandidateId"
			INNER JOIN "iacube.db::tables.Candidate.Profiles" AS b
				ON  r."CandidateId" = b."CandidateId"
				AND r."ProfileId" = b."ProfileId"
			INNER JOIN "iacube.db::tables.Profile.Profiles" AS c
				ON b."ProfileId" = c."ProfileId"
			WHERE CONTAINS (*,:searchTerm, FUZZY(0.8))
	;
	
	filtered = 
		APPLY_FILTER (:prefiltered,:filter)
	;

	
	SELECT TOP 1
			"t","s"
		INTO nLimit,nOffset
		FROM :paging
	;
	filtered = 
		SELECT *
			FROM :filtered
			LIMIT :nLimit
			OFFSET :nOffset
	;

	profiles = 
		SELECT DISTINCT
				"CandidateId",
				"ProfileId",
				"ExternalId",
				"ProfileTypeId",
				"Link",
				"Headline",
				"StatusId"
			FROM :filtered AS a
	;
	candidates = 
		SELECT DISTINCT
				a."CandidateId",
				a."LastName",
				a."FirstName",
				a."Location",
				a."ProfArea",
				a."Photo",
				MAX(a."Distance") AS "Distance"
			FROM :filtered AS a
			GROUP BY 
				a."CandidateId",
				a."LastName",
				a."FirstName",
				a."Location",
				a."ProfArea",
				a."Photo"
	;
	salary = 
		SELECT 
				a."CandidateId",
				b."ProfileId",
				c."Salary",
				c."SalaryCurr"
			FROM :candidates AS a
			INNER JOIN "iacube.db::tables.Candidate.Profiles" AS b
				ON a."CandidateId" = b."CandidateId"
			INNER JOIN "iacube.db::tables.Profile.ProfileDetails" AS c
				ON b."ProfileId" = c."ProfileId"
			ORDER BY c."Salary"
	;
	contacts =
		SELECT 
				a."CandidateId",
				a."ContactTypeId",
				a."Value"
			FROM "iacube.db::tables.Candidate.Contacts" AS a
			INNER JOIN :candidates AS b
				ON a."CandidateId" = b."CandidateId"
	;
	languages = 
		SELECT
				a."CandidateId",
				a."LanguageId",
				a."LevelId"
			FROM "iacube.db::tables.Candidate.Languages" AS a
			INNER JOIN :candidates AS b
				ON a."CandidateId" = b."CandidateId"
	;
	requisitions = 
		SELECT 
				a."CandidateId",
				a."ReqId",
				c."Title",
				a."StatusId",
				a."AssignedBy",
				a."AssignedAt",
				a."ChangedBy",
				a."ChangedAt",
				a."ProfileId",
				a."Distance"
			FROM "iacube.db::tables.Requisition.Candidates" AS a
			INNER JOIN :candidates AS b
				ON a."CandidateId" = b."CandidateId"
			LEFT JOIN "iacube.db::tables.Requisition.Requisitions" AS c
				ON a."ReqId" = c."ReqId"
	;

	sites =
		SELECT 
				"Id" AS "id",
				"Description" AS "name"
			FROM "iacube.db::tables.Profile._dictionary.ProfileTypes"
	;
END;
